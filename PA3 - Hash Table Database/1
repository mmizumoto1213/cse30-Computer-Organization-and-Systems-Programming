#include <limits.h>
#include <stdint.h>
#include <time.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>
#include "hashdb.h"
#include "readsubs.h"

//uncomment the next line when you want to use your routine
#define MYCODE
#ifndef MYCODE
TODO(USING THE SOLUTION FUNCTION NOT MY CODE)
#else

/*
 * insert_ticket
 *      add a ticket (summons) to the database
 *
 *      if the vehicle (plate state) is not in the database then
 *      a new struct vehicle entry must be made for it in the hash table.
	 *      Ne vehicle entries are made at the the FRONT of the collison chain
	 *
	 *      If the vehicle is already in the hash chain, you only need to add 
	 *      a new ticket to the ticket chain for this summons.
	 *
	 *      Tickets are added to the ticket chain linked to the struct vehicle
	 *      at the END of the ticket chain.
	 *
	 *      Also you must update the tot_fine and cnt_tickets in the struct vehicle
	 *      to account for the new summons(ticket) just added
	 * args:
	 *  hashtab pointer to hashtable (pointer to an array of pointers)
	 *  tabsz   number of elements in the hash table
	 *          example hashval = hash(plate, argv) % tabsz;
	 *  fineTab pointer fine table. maps code number to text description & fine cost 
	 *          you use this table to get the amount of the fine when calculating
	 *          the tot_fine field in struct vehicle.
	 *          example:
	 *              struct vehicle *vhpt;
	 *              vhpt->tot_fine += fineTab[code].fine;
	 *  summ    summons id string to be added
	 *          this string needs to be converted to a number to be stored in the
	 *          database. This saves space and is faster to compare than a string         
	 *          Conversion function is supplied. use example:
	 *               long long summid;
	 *               if (strtosumid(summ, argv, &summid) != 0)
	 *                  error handling
	 *               new_ticket->summons = summid;
	 *  plate   plate id string to be added
	 *  state   state id string to be added
	 *  date    date of summons string
	 *          this string needs to be converted to a number to be stored in the
	 *          database. This saves space and is faster to compare than a string
	 *          The encoding into a number uses Linux time format.
	 *          Conversion function is supplied. use example:
	 *              time_t dateval;
	 *              if (strtoDate(date, &dateval, argv) != 0)
	 *                  error handling
	 *              new_ticket->date = dateval;
	 *  code    summons code integer value used an an index into the fines table
	 *  argv    for error printing
	 *
	 * returns 0 if ok -1 for all errors
	 */

	int
	insert_ticket(struct vehicle **hashtab, uint32_t tabsz, struct fine *fineTab, char *summ,
		    char *plate, char *state, char *date, int code, char **argv)
	{
	/* insert your code here */
		unsigned long long summid;
		if (strtosumid(summ, &summid, argv) != 0)
			return -1;
		time_t dateval;
		if (strtoDate(date, &dateval, argv) != 0)
			return -1;
		uint32_t key = hash(plate, argv) % tabsz;
		struct vehicle *v = vehicle_lookup(hashtab, tabsz, plate, state, argv);
		/*
		for (int i = 0; i < 3; i++) {
			if (*(hashtab + i) != NULL)
				printf("%s\n", (*(hashtab + i))->plate);
		}
		*/
		printf("\n");
		// Vehicle not found so add to hashtab
		/*
		if (*(hashtab + key) == NULL) {
			struct vehicle *newv = malloc(sizeof(*newv));
			if (newv == NULL)
				return -1;
			else {
				newv->state = state;
				newv->plate = plate;
				newv->tot_fine = (fineTab + code)->fine;
				newv->cnt_ticket = 1;
				newv->next = NULL;
				*(hashtab + key) = newv;
			}
			struct ticket *newt = malloc(sizeof(*newt));
			// Checks if malloc was successful
			if (newt == NULL)
				return -1;
			else {
				newt->summons = summid;
				newt->date = dateval;
				newt->code = code;
				newt->next = NULL;
			}
			newv->head = newt;
			return 0;
		} else 
		*/
		if (v == NULL) {
			struct vehicle *newv = malloc(sizeof(*newv));
			// Checks if malloc was successful
			if (newv == NULL)
				return -1;
			else {
				newv->state = state;
				newv->plate = plate;
				newv->tot_fine = (fineTab + code)->fine;
				newv->cnt_ticket = 1;
				/* Problem
				 */
				/*
				*/
				struct ticket *newt = malloc(sizeof(*newt));
				// Checks if malloc was successful
				if (newt == NULL)
					return -1;
				else {
					newt->summons = summid;
					newt->date = dateval;
					newt->code = code;
					newt->next = NULL;
				}
				newv->head = newt;
				newv->next = *(hashtab + key);
			(hashtab + key)->next = newv;
			return 0;
			}
	}
	// Vehicle was found
	else {
		struct ticket *t = (v->head);
		struct ticket *prev = (v->head);
		struct ticket *newt = malloc(sizeof(*newt));
		// Checks if malloc was successful
		if (newt == NULL)
			return -1;
		else {
			v->tot_fine += (fineTab + code)->fine;
			v->cnt_ticket++;
			newt->summons = summid;
			newt->date = dateval;
			newt->code = code;
			newt->next = NULL;
			while (t != NULL) {
				prev = t;
				t = t->next;
			}
			// Not needed if vehicles are only added through this method
			if (prev == NULL) {
				v->head = newt;
				return 0;
			}
			
			prev->next = newt;
			return 0;
		}
		return -1;
	}
	return -1;
}
#endif
